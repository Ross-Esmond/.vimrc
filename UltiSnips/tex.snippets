snippet fr "fraction" w
\frac{$1}{$2}$0
endsnippet

snippet tfr "tiny fraction" w
\tfrac{$1}{$2}$0
endsnippet

snippet lr( "left-right parens" w
\left($1\right)$0
endsnippet

snippet lr| "left-right absolute" w
\left|$1\right|$0
endsnippet

snippet lr< "left-right angle brackets" w
\langle $1\rangle$0
endsnippet

snippet align "align"
\begin{align*}
	$1
\end{align*}$0
endsnippet

snippet sum "Summation" w
\sum_{$1}^{$2} $0
endsnippet

snippet lim "Limit" w
\lim_{$1} $0
endsnippet

snippet int "Integrate" w
\int_{$1}^{$2}$0
endsnippet

snippet eval "Evaluate" w
\bigg\rvert_{$1}^{$2}$0
endsnippet

snippet bin "Binomial" w
\binom{$1}{$2} $0
endsnippet

snippet cases "Cases"
\begin{cases}
	$1
\end{cases}$0
endsnippet

global !p
def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet
